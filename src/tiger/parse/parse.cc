// Generated by Bisonc++ V6.04.03 on Sun, 10 Nov 2024 08:26:48 +0000

// base/comment

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved_::UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN_ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok_
// which is applied. In this errTok_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved_
    {
        UNDETERMINED_   = -2,
        EOF_            = -1,
        errTok_         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    inline bool operator&(StateType lhs, StateType rhs)
    {
        return (static_cast<int>(lhs) & rhs) != 0;
    }
    enum StateTransition
    {
        ACCEPT_   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI_     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR_     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION_ = 10
    };

// Productions Info Records:
PI_ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {328, 1}, // 1: program ->  exp
     {329, 1}, // 2: exp (INT) ->  INT
     {329, 1}, // 3: exp (STRING) ->  STRING
     {329, 1}, // 4: exp (NIL) ->  NIL
     {329, 1}, // 5: exp (BREAK) ->  BREAK
     {329, 5}, // 6: exp (LET) ->  LET decs IN expseq END
     {329, 6}, // 7: exp (ID) ->  ID LBRACK exp RBRACK OF exp
     {329, 1}, // 8: exp ->  lvalue
     {329, 3}, // 9: exp (ASSIGN) ->  lvalue ASSIGN exp
     {329, 3}, // 10: exp (LPAREN) ->  LPAREN exp RPAREN
     {329, 3}, // 11: exp (LPAREN) ->  LPAREN sequencing_exps RPAREN
     {329, 2}, // 12: exp (LPAREN) ->  LPAREN RPAREN
     {329, 1}, // 13: exp ->  record_exp
     {329, 1}, // 14: exp ->  if_exp
     {329, 1}, // 15: exp ->  for_exp
     {329, 1}, // 16: exp ->  while_exp
     {329, 1}, // 17: exp ->  call_exp
     {329, 1}, // 18: exp ->  op_exp
     {330, 1}, // 19: expseq ->  sequencing_exps
     {331, 3}, // 20: record_exp (ID) ->  ID LBRACE RBRACE
     {331, 4}, // 21: record_exp (ID) ->  ID LBRACE rec RBRACE
     {332, 4}, // 22: if_exp (IF) ->  IF exp THEN exp
     {332, 6}, // 23: if_exp (IF) ->  IF exp THEN exp ELSE exp
     {332, 6}, // 24: if_exp (IF) ->  IF LPAREN exp RPAREN THEN exp
     {332, 8}, // 25: if_exp (IF) ->  IF LPAREN exp RPAREN THEN exp ELSE exp
     {333, 8}, // 26: for_exp (FOR) ->  FOR ID ASSIGN exp TO exp DO exp
     {334, 4}, // 27: while_exp (WHILE) ->  WHILE exp DO exp
     {334, 6}, // 28: while_exp (WHILE) ->  WHILE LPAREN exp RPAREN DO exp
     {335, 4}, // 29: call_exp (ID) ->  ID LPAREN sequencing_exps RPAREN
     {335, 3}, // 30: call_exp (ID) ->  ID LPAREN RPAREN
     {336, 3}, // 31: op_exp (EQ) ->  exp EQ exp
     {336, 3}, // 32: op_exp (NEQ) ->  exp NEQ exp
     {336, 3}, // 33: op_exp (LT) ->  exp LT exp
     {336, 3}, // 34: op_exp (LE) ->  exp LE exp
     {336, 3}, // 35: op_exp (GT) ->  exp GT exp
     {336, 3}, // 36: op_exp (GE) ->  exp GE exp
     {336, 3}, // 37: op_exp (PLUS) ->  exp PLUS exp
     {336, 3}, // 38: op_exp (MINUS) ->  exp MINUS exp
     {336, 3}, // 39: op_exp (TIMES) ->  exp TIMES exp
     {336, 3}, // 40: op_exp (DIVIDE) ->  exp DIVIDE exp
     {336, 3}, // 41: op_exp (AND) ->  exp AND exp
     {336, 3}, // 42: op_exp (OR) ->  exp OR exp
     {336, 2}, // 43: op_exp (UMINUS) ->  MINUS exp
     {337, 0}, // 44: actuals ->  <empty>
     {337, 1}, // 45: actuals ->  nonemptyactuals
     {338, 1}, // 46: nonemptyactuals ->  exp
     {338, 3}, // 47: nonemptyactuals (COMMA) ->  exp COMMA nonemptyactuals
     {339, 1}, // 48: sequencing_exps ->  exp
     {339, 3}, // 49: sequencing_exps (COMMA) ->  exp COMMA sequencing_exps
     {339, 3}, // 50: sequencing_exps (SEMICOLON) ->  exp SEMICOLON sequencing_exps
     {339, 1}, // 51: sequencing_exps ->  actuals
     {340, 1}, // 52: lvalue (ID) ->  ID
     {340, 3}, // 53: lvalue (DOT) ->  lvalue DOT ID
     {340, 4}, // 54: lvalue (LBRACK) ->  lvalue LBRACK exp RBRACK
     {340, 4}, // 55: lvalue (ID) ->  ID LBRACK exp RBRACK
     {341, 1}, // 56: decs ->  decs_nonempty
     {341, 1}, // 57: decs ->  vardec
     {341, 2}, // 58: decs ->  vardec decs
     {342, 1}, // 59: decs_nonempty ->  decs_nonempty_s
     {342, 2}, // 60: decs_nonempty ->  decs_nonempty_s decs
     {343, 1}, // 61: decs_nonempty_s ->  tydec
     {343, 1}, // 62: decs_nonempty_s ->  fundec
     {344, 4}, // 63: vardec (VAR) ->  VAR ID ASSIGN exp
     {344, 6}, // 64: vardec (VAR) ->  VAR ID COLON ID ASSIGN exp
     {345, 1}, // 65: rec ->  rec_nonempty
     {345, 0}, // 66: rec ->  <empty>
     {346, 1}, // 67: rec_nonempty ->  rec_one
     {346, 3}, // 68: rec_nonempty (COMMA) ->  rec_one COMMA rec
     {347, 3}, // 69: rec_one (ID) ->  ID EQ exp
     {348, 2}, // 70: tydec (TYPE) ->  TYPE tydec_one
     {348, 3}, // 71: tydec (TYPE) ->  TYPE tydec_one tydec
     {349, 3}, // 72: tydec_one (ID) ->  ID EQ ty
     {350, 0}, // 73: tyfields ->  <empty>
     {350, 1}, // 74: tyfields ->  tyfields_nonempty
     {351, 1}, // 75: tyfields_nonempty ->  tyfield
     {351, 3}, // 76: tyfields_nonempty (COMMA) ->  tyfield COMMA tyfields_nonempty
     {352, 3}, // 77: tyfield (ID) ->  ID COLON ID
     {353, 3}, // 78: ty (ARRAY) ->  ARRAY OF ID
     {353, 1}, // 79: ty (ID) ->  ID
     {353, 3}, // 80: ty (LBRACE) ->  LBRACE tyfields RBRACE
     {354, 2}, // 81: fundec (FUNCTION) ->  FUNCTION fundec_one
     {354, 3}, // 82: fundec (FUNCTION) ->  FUNCTION fundec_one fundec
     {355, 8}, // 83: fundec_one (ID) ->  ID LPAREN tyfields RPAREN COLON ID EQ exp
     {355, 7}, // 84: fundec_one (ID) ->  ID LPAREN RPAREN COLON ID EQ exp
     {355, 6}, // 85: fundec_one (ID) ->  ID LPAREN tyfields RPAREN EQ exp
     {355, 5}, // 86: fundec_one (ID) ->  ID LPAREN RPAREN EQ exp
     {355, 10}, // 87: fundec_one (ID) ->  ID LPAREN tyfields RPAREN COLON ID EQ LPAREN exp RPAREN
     {355, 9}, // 88: fundec_one (ID) ->  ID LPAREN RPAREN COLON ID EQ LPAREN exp RPAREN
     {355, 8}, // 89: fundec_one (ID) ->  ID LPAREN tyfields RPAREN EQ LPAREN exp RPAREN
     {355, 7}, // 90: fundec_one (ID) ->  ID LPAREN RPAREN EQ LPAREN exp RPAREN
     {356, 1}, // 91: program_$ ->  program
};

// State info and SR_ transitions for each state.


SR_ s_0[] =
{
    { { REQ_TOKEN}, { 21} },              
    { {       328}, {  1} }, // program   
    { {       329}, {  2} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_1[] =
{
    { { REQ_TOKEN}, {       2} }, 
    { {      EOF_}, { ACCEPT_} }, 
    { {         0}, {       0} }, 
};

SR_ s_2[] =
{
    { { REQ_DEF}, { 13} },          
    { {     290}, { 21} }, // EQ    
    { {     291}, { 22} }, // NEQ   
    { {     292}, { 23} }, // LT    
    { {     293}, { 24} }, // LE    
    { {     294}, { 25} }, // GT    
    { {     295}, { 26} }, // GE    
    { {     296}, { 27} }, // PLUS  
    { {     297}, { 28} }, // MINUS 
    { {     298}, { 29} }, // TIMES 
    { {     299}, { 30} }, // DIVIDE
    { {     288}, { 31} }, // AND   
    { {     289}, { 32} }, // OR    
    { {       0}, { -1} },          
};

SR_ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR_ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR_ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR_ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR_ s_7[] =
{
    { { REQ_TOKEN}, { 10} },                   
    { {       341}, { 33} }, // decs           
    { {       342}, { 34} }, // decs_nonempty  
    { {       344}, { 35} }, // vardec         
    { {       343}, { 36} }, // decs_nonempty_s
    { {       286}, { 37} }, // VAR            
    { {       348}, { 38} }, // tydec          
    { {       354}, { 39} }, // fundec         
    { {       287}, { 40} }, // TYPE           
    { {       285}, { 41} }, // FUNCTION       
    { {         0}, {  0} },                   
};

SR_ s_8[] =
{
    { { REQ_DEF}, {   4} },          
    { {     265}, {  42} }, // LBRACK
    { {     267}, {  43} }, // LBRACE
    { {     263}, {  44} }, // LPAREN
    { {       0}, { -52} },          
};

SR_ s_9[] =
{
    { { REQ_DEF}, {  4} },          
    { {     270}, { 45} }, // ASSIGN
    { {     269}, { 46} }, // DOT   
    { {     265}, { 47} }, // LBRACK
    { {       0}, { -8} },          
};

SR_ s_10[] =
{
    { { REQ_DEF}, {  24} },                   
    { {     329}, {  48} }, // exp            
    { {     339}, {  49} }, // sequencing_exps
    { {     264}, {  50} }, // RPAREN         
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     337}, {  51} }, // actuals        
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {     338}, {  52} }, // nonemptyactuals
    { {       0}, { -44} },                   
};

SR_ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR_ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR_ s_13[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR_ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR_ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR_ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR_ s_17[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 53} }, // exp       
    { {       263}, { 54} }, // LPAREN    
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_18[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       257}, { 55} }, // ID
    { {         0}, {  0} },      
};

SR_ s_19[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 56} }, // exp       
    { {       263}, { 57} }, // LPAREN    
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_20[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 58} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_21[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 59} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_22[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 60} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_23[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 61} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_24[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 62} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_25[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 63} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_26[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 64} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_27[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 65} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_28[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 66} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_29[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 67} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_30[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 68} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_31[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 69} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_32[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 70} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_33[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       280}, { 71} }, // IN
    { {         0}, {  0} },      
};

SR_ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR_ s_35[] =
{
    { { REQ_DEF}, {  10} },                   
    { {     341}, {  72} }, // decs           
    { {     342}, {  34} }, // decs_nonempty  
    { {     344}, {  35} }, // vardec         
    { {     343}, {  36} }, // decs_nonempty_s
    { {     286}, {  37} }, // VAR            
    { {     348}, {  38} }, // tydec          
    { {     354}, {  39} }, // fundec         
    { {     287}, {  40} }, // TYPE           
    { {     285}, {  41} }, // FUNCTION       
    { {       0}, { -57} },                   
};

SR_ s_36[] =
{
    { { REQ_DEF}, {  10} },                   
    { {     341}, {  73} }, // decs           
    { {     342}, {  34} }, // decs_nonempty  
    { {     344}, {  35} }, // vardec         
    { {     343}, {  36} }, // decs_nonempty_s
    { {     286}, {  37} }, // VAR            
    { {     348}, {  38} }, // tydec          
    { {     354}, {  39} }, // fundec         
    { {     287}, {  40} }, // TYPE           
    { {     285}, {  41} }, // FUNCTION       
    { {       0}, { -59} },                   
};

SR_ s_37[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       257}, { 74} }, // ID
    { {         0}, {  0} },      
};

SR_ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR_ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR_ s_40[] =
{
    { { REQ_TOKEN}, {  3} },             
    { {       349}, { 75} }, // tydec_one
    { {       257}, { 76} }, // ID       
    { {         0}, {  0} },             
};

SR_ s_41[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       355}, { 77} }, // fundec_one
    { {       257}, { 78} }, // ID        
    { {         0}, {  0} },              
};

SR_ s_42[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 79} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_43[] =
{
    { { REQ_DEF}, {   6} },                
    { {     268}, {  80} }, // RBRACE      
    { {     345}, {  81} }, // rec         
    { {     346}, {  82} }, // rec_nonempty
    { {     347}, {  83} }, // rec_one     
    { {     257}, {  84} }, // ID          
    { {       0}, { -66} },                
};

SR_ s_44[] =
{
    { { REQ_DEF}, {  24} },                   
    { {     339}, {  85} }, // sequencing_exps
    { {     264}, {  86} }, // RPAREN         
    { {     329}, {  87} }, // exp            
    { {     337}, {  51} }, // actuals        
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     338}, {  52} }, // nonemptyactuals
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {       0}, { -44} },                   
};

SR_ s_45[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 88} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_46[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       257}, { 89} }, // ID
    { {         0}, {  0} },      
};

SR_ s_47[] =
{
    { { REQ_TOKEN}, { 20} },              
    { {       329}, { 90} }, // exp       
    { {       259}, {  3} }, // INT       
    { {       258}, {  4} }, // STRING    
    { {       284}, {  5} }, // NIL       
    { {       283}, {  6} }, // BREAK     
    { {       279}, {  7} }, // LET       
    { {       257}, {  8} }, // ID        
    { {       340}, {  9} }, // lvalue    
    { {       263}, { 10} }, // LPAREN    
    { {       331}, { 11} }, // record_exp
    { {       332}, { 12} }, // if_exp    
    { {       333}, { 13} }, // for_exp   
    { {       334}, { 14} }, // while_exp 
    { {       335}, { 15} }, // call_exp  
    { {       336}, { 16} }, // op_exp    
    { {       272}, { 17} }, // IF        
    { {       276}, { 18} }, // FOR       
    { {       275}, { 19} }, // WHILE     
    { {       297}, { 20} }, // MINUS     
    { {         0}, {  0} },              
};

SR_ s_48[] =
{
    { { REQ_DEF}, {  16} },             
    { {     264}, {  91} }, // RPAREN   
    { {     260}, {  92} }, // COMMA    
    { {     262}, {  93} }, // SEMICOLON
    { {     290}, {  21} }, // EQ       
    { {     291}, {  22} }, // NEQ      
    { {     292}, {  23} }, // LT       
    { {     293}, {  24} }, // LE       
    { {     294}, {  25} }, // GT       
    { {     295}, {  26} }, // GE       
    { {     296}, {  27} }, // PLUS     
    { {     297}, {  28} }, // MINUS    
    { {     298}, {  29} }, // TIMES    
    { {     299}, {  30} }, // DIVIDE   
    { {     288}, {  31} }, // AND      
    { {     289}, {  32} }, // OR       
    { {       0}, { -48} },             
};

SR_ s_49[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       264}, { 94} }, // RPAREN
    { {         0}, {  0} },          
};

SR_ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR_ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR_ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR_ s_53[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       273}, { 95} }, // THEN  
    { {       290}, { 21} }, // EQ    
    { {       291}, { 22} }, // NEQ   
    { {       292}, { 23} }, // LT    
    { {       293}, { 24} }, // LE    
    { {       294}, { 25} }, // GT    
    { {       295}, { 26} }, // GE    
    { {       296}, { 27} }, // PLUS  
    { {       297}, { 28} }, // MINUS 
    { {       298}, { 29} }, // TIMES 
    { {       299}, { 30} }, // DIVIDE
    { {       288}, { 31} }, // AND   
    { {       289}, { 32} }, // OR    
    { {         0}, {  0} },          
};

SR_ s_54[] =
{
    { { REQ_DEF}, {  24} },                   
    { {     329}, {  96} }, // exp            
    { {     339}, {  49} }, // sequencing_exps
    { {     264}, {  50} }, // RPAREN         
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     337}, {  51} }, // actuals        
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {     338}, {  52} }, // nonemptyactuals
    { {       0}, { -44} },                   
};

SR_ s_55[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       270}, { 97} }, // ASSIGN
    { {         0}, {  0} },          
};

SR_ s_56[] =
{
    { { REQ_TOKEN}, { 14} },          
    { {       278}, { 98} }, // DO    
    { {       290}, { 21} }, // EQ    
    { {       291}, { 22} }, // NEQ   
    { {       292}, { 23} }, // LT    
    { {       293}, { 24} }, // LE    
    { {       294}, { 25} }, // GT    
    { {       295}, { 26} }, // GE    
    { {       296}, { 27} }, // PLUS  
    { {       297}, { 28} }, // MINUS 
    { {       298}, { 29} }, // TIMES 
    { {       299}, { 30} }, // DIVIDE
    { {       288}, { 31} }, // AND   
    { {       289}, { 32} }, // OR    
    { {         0}, {  0} },          
};

SR_ s_57[] =
{
    { { REQ_DEF}, {  24} },                   
    { {     329}, {  99} }, // exp            
    { {     339}, {  49} }, // sequencing_exps
    { {     264}, {  50} }, // RPAREN         
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     337}, {  51} }, // actuals        
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {     338}, {  52} }, // nonemptyactuals
    { {       0}, { -44} },                   
};

SR_ s_58[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -43} }, 
};

SR_ s_59[] =
{
    { { REQ_DEF}, {   5} },          
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {       0}, { -31} },          
};

SR_ s_60[] =
{
    { { REQ_DEF}, {   5} },          
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {       0}, { -32} },          
};

SR_ s_61[] =
{
    { { REQ_DEF}, {   5} },          
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {       0}, { -33} },          
};

SR_ s_62[] =
{
    { { REQ_DEF}, {   5} },          
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {       0}, { -34} },          
};

SR_ s_63[] =
{
    { { REQ_DEF}, {   5} },          
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {       0}, { -35} },          
};

SR_ s_64[] =
{
    { { REQ_DEF}, {   5} },          
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {       0}, { -36} },          
};

SR_ s_65[] =
{
    { { REQ_DEF}, {   3} },          
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {       0}, { -37} },          
};

SR_ s_66[] =
{
    { { REQ_DEF}, {   3} },          
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {       0}, { -38} },          
};

SR_ s_67[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -39} }, 
};

SR_ s_68[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -40} }, 
};

SR_ s_69[] =
{
    { { REQ_DEF}, {  11} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {       0}, { -41} },          
};

SR_ s_70[] =
{
    { { REQ_DEF}, {  11} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {       0}, { -42} },          
};

SR_ s_71[] =
{
    { { REQ_DEF}, {  24} },                   
    { {     330}, { 100} }, // expseq         
    { {     339}, { 101} }, // sequencing_exps
    { {     329}, {  87} }, // exp            
    { {     337}, {  51} }, // actuals        
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     338}, {  52} }, // nonemptyactuals
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {       0}, { -44} },                   
};

SR_ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR_ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR_ s_74[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       270}, { 102} }, // ASSIGN
    { {       261}, { 103} }, // COLON 
    { {         0}, {   0} },          
};

SR_ s_75[] =
{
    { { REQ_DEF}, {   3} },         
    { {     348}, { 104} }, // tydec
    { {     287}, {  40} }, // TYPE 
    { {       0}, { -70} },         
};

SR_ s_76[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       290}, { 105} }, // EQ
    { {         0}, {   0} },      
};

SR_ s_77[] =
{
    { { REQ_DEF}, {   3} },            
    { {     354}, { 106} }, // fundec  
    { {     285}, {  41} }, // FUNCTION
    { {       0}, { -81} },            
};

SR_ s_78[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       263}, { 107} }, // LPAREN
    { {         0}, {   0} },          
};

SR_ s_79[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       266}, { 108} }, // RBRACK
    { {       290}, {  21} }, // EQ    
    { {       291}, {  22} }, // NEQ   
    { {       292}, {  23} }, // LT    
    { {       293}, {  24} }, // LE    
    { {       294}, {  25} }, // GT    
    { {       295}, {  26} }, // GE    
    { {       296}, {  27} }, // PLUS  
    { {       297}, {  28} }, // MINUS 
    { {       298}, {  29} }, // TIMES 
    { {       299}, {  30} }, // DIVIDE
    { {       288}, {  31} }, // AND   
    { {       289}, {  32} }, // OR    
    { {         0}, {   0} },          
};

SR_ s_80[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR_ s_81[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       268}, { 109} }, // RBRACE
    { {         0}, {   0} },          
};

SR_ s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR_ s_83[] =
{
    { { REQ_DEF}, {   2} },         
    { {     260}, { 110} }, // COMMA
    { {       0}, { -67} },         
};

SR_ s_84[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       290}, { 111} }, // EQ
    { {         0}, {   0} },      
};

SR_ s_85[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       264}, { 112} }, // RPAREN
    { {         0}, {   0} },          
};

SR_ s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR_ s_87[] =
{
    { { REQ_DEF}, {  15} },             
    { {     260}, {  92} }, // COMMA    
    { {     262}, {  93} }, // SEMICOLON
    { {     290}, {  21} }, // EQ       
    { {     291}, {  22} }, // NEQ      
    { {     292}, {  23} }, // LT       
    { {     293}, {  24} }, // LE       
    { {     294}, {  25} }, // GT       
    { {     295}, {  26} }, // GE       
    { {     296}, {  27} }, // PLUS     
    { {     297}, {  28} }, // MINUS    
    { {     298}, {  29} }, // TIMES    
    { {     299}, {  30} }, // DIVIDE   
    { {     288}, {  31} }, // AND      
    { {     289}, {  32} }, // OR       
    { {       0}, { -46} },             
};

SR_ s_88[] =
{
    { { REQ_DEF}, { 13} },          
    { {     290}, { 21} }, // EQ    
    { {     291}, { 22} }, // NEQ   
    { {     292}, { 23} }, // LT    
    { {     293}, { 24} }, // LE    
    { {     294}, { 25} }, // GT    
    { {     295}, { 26} }, // GE    
    { {     296}, { 27} }, // PLUS  
    { {     297}, { 28} }, // MINUS 
    { {     298}, { 29} }, // TIMES 
    { {     299}, { 30} }, // DIVIDE
    { {     288}, { 31} }, // AND   
    { {     289}, { 32} }, // OR    
    { {       0}, { -9} },          
};

SR_ s_89[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR_ s_90[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       266}, { 113} }, // RBRACK
    { {       290}, {  21} }, // EQ    
    { {       291}, {  22} }, // NEQ   
    { {       292}, {  23} }, // LT    
    { {       293}, {  24} }, // LE    
    { {       294}, {  25} }, // GT    
    { {       295}, {  26} }, // GE    
    { {       296}, {  27} }, // PLUS  
    { {       297}, {  28} }, // MINUS 
    { {       298}, {  29} }, // TIMES 
    { {       299}, {  30} }, // DIVIDE
    { {       288}, {  31} }, // AND   
    { {       289}, {  32} }, // OR    
    { {         0}, {   0} },          
};

SR_ s_91[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR_ s_92[] =
{
    { { REQ_DEF}, {  23} },                   
    { {     339}, { 114} }, // sequencing_exps
    { {     338}, { 115} }, // nonemptyactuals
    { {     329}, {  87} }, // exp            
    { {     337}, {  51} }, // actuals        
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {       0}, { -44} },                   
};

SR_ s_93[] =
{
    { { REQ_DEF}, {  23} },                   
    { {     339}, { 116} }, // sequencing_exps
    { {     329}, {  87} }, // exp            
    { {     337}, {  51} }, // actuals        
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     338}, {  52} }, // nonemptyactuals
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {       0}, { -44} },                   
};

SR_ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR_ s_95[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 117} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_96[] =
{
    { { REQ_DEF}, {  43} },             
    { {     264}, { 118} }, // RPAREN   
    { {     260}, {  92} }, // COMMA    
    { {     262}, {  93} }, // SEMICOLON
    { {     290}, {  21} }, // EQ       
    { {     291}, {  22} }, // NEQ      
    { {     292}, {  23} }, // LT       
    { {     293}, {  24} }, // LE       
    { {     294}, {  25} }, // GT       
    { {     295}, {  26} }, // GE       
    { {     296}, {  27} }, // PLUS     
    { {     297}, {  28} }, // MINUS    
    { {     298}, {  29} }, // TIMES    
    { {     299}, {  30} }, // DIVIDE   
    { {     288}, {  31} }, // AND      
    { {     289}, {  32} }, // OR       
    { {       0}, { -46} },             
};

SR_ s_97[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 119} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_98[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 120} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_99[] =
{
    { { REQ_DEF}, {  32} },             
    { {     264}, { 121} }, // RPAREN   
    { {     260}, {  92} }, // COMMA    
    { {     262}, {  93} }, // SEMICOLON
    { {     290}, {  21} }, // EQ       
    { {     291}, {  22} }, // NEQ      
    { {     292}, {  23} }, // LT       
    { {     293}, {  24} }, // LE       
    { {     294}, {  25} }, // GT       
    { {     295}, {  26} }, // GE       
    { {     296}, {  27} }, // PLUS     
    { {     297}, {  28} }, // MINUS    
    { {     298}, {  29} }, // TIMES    
    { {     299}, {  30} }, // DIVIDE   
    { {     288}, {  31} }, // AND      
    { {     289}, {  32} }, // OR       
    { {       0}, { -48} },             
};

SR_ s_100[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       281}, { 122} }, // END
    { {         0}, {   0} },       
};

SR_ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR_ s_102[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 123} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_103[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       257}, { 124} }, // ID
    { {         0}, {   0} },      
};

SR_ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR_ s_105[] =
{
    { { REQ_TOKEN}, {   5} },          
    { {       353}, { 125} }, // ty    
    { {       271}, { 126} }, // ARRAY 
    { {       257}, { 127} }, // ID    
    { {       267}, { 128} }, // LBRACE
    { {         0}, {   0} },          
};

SR_ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -82} }, 
};

SR_ s_107[] =
{
    { { REQ_DEF}, {   6} },                     
    { {     350}, { 129} }, // tyfields         
    { {     264}, { 130} }, // RPAREN           
    { {     351}, { 131} }, // tyfields_nonempty
    { {     352}, { 132} }, // tyfield          
    { {     257}, { 133} }, // ID               
    { {       0}, { -73} },                     
};

SR_ s_108[] =
{
    { { REQ_DEF}, {   2} },      
    { {     282}, { 134} }, // OF
    { {       0}, { -55} },      
};

SR_ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR_ s_110[] =
{
    { { REQ_DEF}, {   5} },                
    { {     345}, { 135} }, // rec         
    { {     346}, {  82} }, // rec_nonempty
    { {     347}, {  83} }, // rec_one     
    { {     257}, {  84} }, // ID          
    { {       0}, { -66} },                
};

SR_ s_111[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 136} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR_ s_113[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR_ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR_ s_115[] =
{
    { { REQ_DEF}, {   3} },          
    { {     264}, { -45} }, // RPAREN
    { {     281}, { -45} }, // END   
    { {       0}, { -47} },          
};

SR_ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR_ s_117[] =
{
    { { REQ_DEF}, {  14} },          
    { {     274}, { 137} }, // ELSE  
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -22} },          
};

SR_ s_118[] =
{
    { { REQ_DEF}, {   2} },        
    { {     273}, { 138} }, // THEN
    { {       0}, { -10} },        
};

SR_ s_119[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       277}, { 139} }, // TO    
    { {       290}, {  21} }, // EQ    
    { {       291}, {  22} }, // NEQ   
    { {       292}, {  23} }, // LT    
    { {       293}, {  24} }, // LE    
    { {       294}, {  25} }, // GT    
    { {       295}, {  26} }, // GE    
    { {       296}, {  27} }, // PLUS  
    { {       297}, {  28} }, // MINUS 
    { {       298}, {  29} }, // TIMES 
    { {       299}, {  30} }, // DIVIDE
    { {       288}, {  31} }, // AND   
    { {       289}, {  32} }, // OR    
    { {         0}, {   0} },          
};

SR_ s_120[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -27} },          
};

SR_ s_121[] =
{
    { { REQ_DEF}, {   2} },      
    { {     278}, { 140} }, // DO
    { {       0}, { -10} },      
};

SR_ s_122[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR_ s_123[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -63} },          
};

SR_ s_124[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       270}, { 141} }, // ASSIGN
    { {         0}, {   0} },          
};

SR_ s_125[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR_ s_126[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       282}, { 142} }, // OF
    { {         0}, {   0} },      
};

SR_ s_127[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -79} }, 
};

SR_ s_128[] =
{
    { { REQ_DEF}, {   5} },                     
    { {     350}, { 143} }, // tyfields         
    { {     351}, { 131} }, // tyfields_nonempty
    { {     352}, { 132} }, // tyfield          
    { {     257}, { 133} }, // ID               
    { {       0}, { -73} },                     
};

SR_ s_129[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       264}, { 144} }, // RPAREN
    { {         0}, {   0} },          
};

SR_ s_130[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {       261}, { 145} }, // COLON
    { {       290}, { 146} }, // EQ   
    { {         0}, {   0} },         
};

SR_ s_131[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR_ s_132[] =
{
    { { REQ_DEF}, {   2} },         
    { {     260}, { 147} }, // COMMA
    { {       0}, { -75} },         
};

SR_ s_133[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       261}, { 148} }, // COLON
    { {         0}, {   0} },         
};

SR_ s_134[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 149} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR_ s_136[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -69} },          
};

SR_ s_137[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 150} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_138[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 151} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_139[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 152} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_140[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 153} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_141[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 154} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_142[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       257}, { 155} }, // ID
    { {         0}, {   0} },      
};

SR_ s_143[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       268}, { 156} }, // RBRACE
    { {         0}, {   0} },          
};

SR_ s_144[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {       261}, { 157} }, // COLON
    { {       290}, { 158} }, // EQ   
    { {         0}, {   0} },         
};

SR_ s_145[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       257}, { 159} }, // ID
    { {         0}, {   0} },      
};

SR_ s_146[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 160} }, // exp       
    { {       263}, { 161} }, // LPAREN    
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_147[] =
{
    { { REQ_TOKEN}, {   4} },                     
    { {       351}, { 162} }, // tyfields_nonempty
    { {       352}, { 132} }, // tyfield          
    { {       257}, { 133} }, // ID               
    { {         0}, {   0} },                     
};

SR_ s_148[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       257}, { 163} }, // ID
    { {         0}, {   0} },      
};

SR_ s_149[] =
{
    { { REQ_DEF}, { 13} },          
    { {     290}, { 21} }, // EQ    
    { {     291}, { 22} }, // NEQ   
    { {     292}, { 23} }, // LT    
    { {     293}, { 24} }, // LE    
    { {     294}, { 25} }, // GT    
    { {     295}, { 26} }, // GE    
    { {     296}, { 27} }, // PLUS  
    { {     297}, { 28} }, // MINUS 
    { {     298}, { 29} }, // TIMES 
    { {     299}, { 30} }, // DIVIDE
    { {     288}, { 31} }, // AND   
    { {     289}, { 32} }, // OR    
    { {       0}, { -7} },          
};

SR_ s_150[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -23} },          
};

SR_ s_151[] =
{
    { { REQ_DEF}, {  14} },          
    { {     274}, { 164} }, // ELSE  
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -24} },          
};

SR_ s_152[] =
{
    { { REQ_TOKEN}, {  14} },          
    { {       278}, { 165} }, // DO    
    { {       290}, {  21} }, // EQ    
    { {       291}, {  22} }, // NEQ   
    { {       292}, {  23} }, // LT    
    { {       293}, {  24} }, // LE    
    { {       294}, {  25} }, // GT    
    { {       295}, {  26} }, // GE    
    { {       296}, {  27} }, // PLUS  
    { {       297}, {  28} }, // MINUS 
    { {       298}, {  29} }, // TIMES 
    { {       299}, {  30} }, // DIVIDE
    { {       288}, {  31} }, // AND   
    { {       289}, {  32} }, // OR    
    { {         0}, {   0} },          
};

SR_ s_153[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -28} },          
};

SR_ s_154[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -64} },          
};

SR_ s_155[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR_ s_156[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -80} }, 
};

SR_ s_157[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       257}, { 166} }, // ID
    { {         0}, {   0} },      
};

SR_ s_158[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 167} }, // exp       
    { {       263}, { 168} }, // LPAREN    
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_159[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       290}, { 169} }, // EQ
    { {         0}, {   0} },      
};

SR_ s_160[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -86} },          
};

SR_ s_161[] =
{
    { { REQ_DEF}, {  24} },                   
    { {     329}, { 170} }, // exp            
    { {     339}, {  49} }, // sequencing_exps
    { {     264}, {  50} }, // RPAREN         
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     337}, {  51} }, // actuals        
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {     338}, {  52} }, // nonemptyactuals
    { {       0}, { -44} },                   
};

SR_ s_162[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR_ s_163[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR_ s_164[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 171} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_165[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 172} }, // exp       
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       263}, {  10} }, // LPAREN    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_166[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       290}, { 173} }, // EQ
    { {         0}, {   0} },      
};

SR_ s_167[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -85} },          
};

SR_ s_168[] =
{
    { { REQ_DEF}, {  24} },                   
    { {     329}, { 174} }, // exp            
    { {     339}, {  49} }, // sequencing_exps
    { {     264}, {  50} }, // RPAREN         
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     337}, {  51} }, // actuals        
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {     338}, {  52} }, // nonemptyactuals
    { {       0}, { -44} },                   
};

SR_ s_169[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 175} }, // exp       
    { {       263}, { 176} }, // LPAREN    
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_170[] =
{
    { { REQ_DEF}, {  20} },             
    { {     264}, { 177} }, // RPAREN   
    { {     260}, {  92} }, // COMMA    
    { {     262}, {  93} }, // SEMICOLON
    { {     290}, {  21} }, // EQ       
    { {     291}, {  22} }, // NEQ      
    { {     292}, {  23} }, // LT       
    { {     293}, {  24} }, // LE       
    { {     294}, {  25} }, // GT       
    { {     295}, {  26} }, // GE       
    { {     296}, {  27} }, // PLUS     
    { {     297}, {  28} }, // MINUS    
    { {     298}, {  29} }, // TIMES    
    { {     299}, {  30} }, // DIVIDE   
    { {     288}, {  31} }, // AND      
    { {     289}, {  32} }, // OR       
    { {       0}, { -46} },             
};

SR_ s_171[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -25} },          
};

SR_ s_172[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -26} },          
};

SR_ s_173[] =
{
    { { REQ_TOKEN}, {  20} },              
    { {       329}, { 178} }, // exp       
    { {       263}, { 179} }, // LPAREN    
    { {       259}, {   3} }, // INT       
    { {       258}, {   4} }, // STRING    
    { {       284}, {   5} }, // NIL       
    { {       283}, {   6} }, // BREAK     
    { {       279}, {   7} }, // LET       
    { {       257}, {   8} }, // ID        
    { {       340}, {   9} }, // lvalue    
    { {       331}, {  11} }, // record_exp
    { {       332}, {  12} }, // if_exp    
    { {       333}, {  13} }, // for_exp   
    { {       334}, {  14} }, // while_exp 
    { {       335}, {  15} }, // call_exp  
    { {       336}, {  16} }, // op_exp    
    { {       272}, {  17} }, // IF        
    { {       276}, {  18} }, // FOR       
    { {       275}, {  19} }, // WHILE     
    { {       297}, {  20} }, // MINUS     
    { {         0}, {   0} },              
};

SR_ s_174[] =
{
    { { REQ_DEF}, {  20} },             
    { {     264}, { 180} }, // RPAREN   
    { {     260}, {  92} }, // COMMA    
    { {     262}, {  93} }, // SEMICOLON
    { {     290}, {  21} }, // EQ       
    { {     291}, {  22} }, // NEQ      
    { {     292}, {  23} }, // LT       
    { {     293}, {  24} }, // LE       
    { {     294}, {  25} }, // GT       
    { {     295}, {  26} }, // GE       
    { {     296}, {  27} }, // PLUS     
    { {     297}, {  28} }, // MINUS    
    { {     298}, {  29} }, // TIMES    
    { {     299}, {  30} }, // DIVIDE   
    { {     288}, {  31} }, // AND      
    { {     289}, {  32} }, // OR       
    { {       0}, { -46} },             
};

SR_ s_175[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -84} },          
};

SR_ s_176[] =
{
    { { REQ_DEF}, {  24} },                   
    { {     329}, { 181} }, // exp            
    { {     339}, {  49} }, // sequencing_exps
    { {     264}, {  50} }, // RPAREN         
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     337}, {  51} }, // actuals        
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {     338}, {  52} }, // nonemptyactuals
    { {       0}, { -44} },                   
};

SR_ s_177[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -10} }, 
};

SR_ s_178[] =
{
    { { REQ_DEF}, {  13} },          
    { {     290}, {  21} }, // EQ    
    { {     291}, {  22} }, // NEQ   
    { {     292}, {  23} }, // LT    
    { {     293}, {  24} }, // LE    
    { {     294}, {  25} }, // GT    
    { {     295}, {  26} }, // GE    
    { {     296}, {  27} }, // PLUS  
    { {     297}, {  28} }, // MINUS 
    { {     298}, {  29} }, // TIMES 
    { {     299}, {  30} }, // DIVIDE
    { {     288}, {  31} }, // AND   
    { {     289}, {  32} }, // OR    
    { {       0}, { -83} },          
};

SR_ s_179[] =
{
    { { REQ_DEF}, {  24} },                   
    { {     329}, { 182} }, // exp            
    { {     339}, {  49} }, // sequencing_exps
    { {     264}, {  50} }, // RPAREN         
    { {     259}, {   3} }, // INT            
    { {     258}, {   4} }, // STRING         
    { {     284}, {   5} }, // NIL            
    { {     283}, {   6} }, // BREAK          
    { {     279}, {   7} }, // LET            
    { {     257}, {   8} }, // ID             
    { {     340}, {   9} }, // lvalue         
    { {     263}, {  10} }, // LPAREN         
    { {     331}, {  11} }, // record_exp     
    { {     332}, {  12} }, // if_exp         
    { {     333}, {  13} }, // for_exp        
    { {     334}, {  14} }, // while_exp      
    { {     335}, {  15} }, // call_exp       
    { {     336}, {  16} }, // op_exp         
    { {     337}, {  51} }, // actuals        
    { {     272}, {  17} }, // IF             
    { {     276}, {  18} }, // FOR            
    { {     275}, {  19} }, // WHILE          
    { {     297}, {  20} }, // MINUS          
    { {     338}, {  52} }, // nonemptyactuals
    { {       0}, { -44} },                   
};

SR_ s_180[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -10} }, 
};

SR_ s_181[] =
{
    { { REQ_DEF}, {  20} },             
    { {     264}, { 183} }, // RPAREN   
    { {     260}, {  92} }, // COMMA    
    { {     262}, {  93} }, // SEMICOLON
    { {     290}, {  21} }, // EQ       
    { {     291}, {  22} }, // NEQ      
    { {     292}, {  23} }, // LT       
    { {     293}, {  24} }, // LE       
    { {     294}, {  25} }, // GT       
    { {     295}, {  26} }, // GE       
    { {     296}, {  27} }, // PLUS     
    { {     297}, {  28} }, // MINUS    
    { {     298}, {  29} }, // TIMES    
    { {     299}, {  30} }, // DIVIDE   
    { {     288}, {  31} }, // AND      
    { {     289}, {  32} }, // OR       
    { {       0}, { -46} },             
};

SR_ s_182[] =
{
    { { REQ_DEF}, {  20} },             
    { {     264}, { 184} }, // RPAREN   
    { {     260}, {  92} }, // COMMA    
    { {     262}, {  93} }, // SEMICOLON
    { {     290}, {  21} }, // EQ       
    { {     291}, {  22} }, // NEQ      
    { {     292}, {  23} }, // LT       
    { {     293}, {  24} }, // LE       
    { {     294}, {  25} }, // GT       
    { {     295}, {  26} }, // GE       
    { {     296}, {  27} }, // PLUS     
    { {     297}, {  28} }, // MINUS    
    { {     298}, {  29} }, // TIMES    
    { {     299}, {  30} }, // DIVIDE   
    { {     288}, {  31} }, // AND      
    { {     289}, {  32} }, // OR       
    { {       0}, { -46} },             
};

SR_ s_183[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -10} }, 
};

SR_ s_184[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -10} }, 
};


// State array:
SR_ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,
};

} // anonymous namespace ends




// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved_::UNDETERMINED_),
    // $insert baseclasscode
    d_requiredTokens_(0)
{
}

// base/clearin
void ParserBase::clearin_()
{
    d_nErrors_ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved_::UNDETERMINED_;
    d_next = TokenPair{ Reserved_::UNDETERMINED_, STYPE_{} };
    d_recovery = false;
    d_acceptedTokens_ = d_requiredTokens_;
    d_val_ = STYPE_{};

    push_(0);
}

// base/debugfunctions

void ParserBase::setDebug(bool mode)
{
    d_actionCases_ = false;
    d_debug_ = mode;
}

void ParserBase::setDebug(DebugMode_ mode)
{
    d_actionCases_ = mode & ACTIONCASES;
    d_debug_ =       mode & ON;
}

// base/lex
void ParserBase::lex_(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved_::EOF_;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup_() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR_ const *sr = s_state[d_state];
    SR_ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN_;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop_(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParserBase::popToken_()
{
    d_token = d_next.first;
    d_val_ = std::move(d_next.second);

    d_next.first = Reserved_::UNDETERMINED_;
}

// base/push
void ParserBase::push_(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize_() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION_;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val_) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken_(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val_) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken_()
{
    if (d_token != Reserved_::UNDETERMINED_)
        pushToken_(d_token);
}

// base/reduce
void ParserBase::reduce_(int rule)
{
    PI_ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop_(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift_(int action)
{
    push_(action);
    popToken_();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens_ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery_()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken_(Reserved_::errTok_);      // specify errTok_ as next token
    push_(lookup_());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top_() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery_()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens_ >= d_requiredTokens_)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors_;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top_()][0].d_type & ERR_ITEM))
    {
        pop_();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle_ for details.

    startRecovery_();
}

// derived/executeaction
void Parser::executeAction_(int production)
try
{
    if (token_() != Reserved_::UNDETERMINED_)
        pushToken_(token_());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 70 "tiger.y"
        {absyn_tree_ = std::make_unique<absyn::AbsynTree>(vs_(0).exp);}
        break;

        case 2:
#line 73 "tiger.y"
        {d_val_.exp = new absyn::IntExp(scanner_.GetTokPos(), vs_(0).ival);}
        break;

        case 3:
#line 74 "tiger.y"
        {d_val_.exp = new absyn::StringExp(scanner_.GetTokPos(), vs_(0).sval);}
        break;

        case 4:
#line 75 "tiger.y"
        {d_val_.exp = new absyn::NilExp(scanner_.GetTokPos());}
        break;

        case 5:
#line 76 "tiger.y"
        {d_val_.exp = new absyn::BreakExp(scanner_.GetTokPos());}
        break;

        case 6:
#line 77 "tiger.y"
        {d_val_.exp = new absyn::LetExp(scanner_.GetTokPos(), vs_(-3).declist, vs_(-1).exp);}
        break;

        case 7:
#line 78 "tiger.y"
        {d_val_.exp = new absyn::ArrayExp(scanner_.GetTokPos(), vs_(-5).sym, vs_(-3).exp, vs_(0).exp);}
        break;

        case 8:
#line 79 "tiger.y"
        {d_val_.exp = new absyn::VarExp(scanner_.GetTokPos(), vs_(0).var);}
        break;

        case 9:
#line 80 "tiger.y"
        {d_val_.exp = new absyn::AssignExp(scanner_.GetTokPos(), vs_(-2).var, vs_(0).exp);}
        break;

        case 10:
#line 81 "tiger.y"
        {d_val_.exp = vs_(-1).exp; }
        break;

        case 11:
#line 82 "tiger.y"
        {d_val_.exp = new absyn::SeqExp(scanner_.GetTokPos(), vs_(-1).explist);}
        break;

        case 12:
#line 83 "tiger.y"
        {d_val_.exp = new absyn::VoidExp(scanner_.GetTokPos());}
        break;

        case 13:
#line 84 "tiger.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 14:
#line 84 "tiger.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 15:
#line 84 "tiger.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 16:
#line 84 "tiger.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 17:
#line 84 "tiger.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 18:
#line 84 "tiger.y"
        {
            d_val_ = vs_(0);
        }
        break;

        case 19:
#line 87 "tiger.y"
        {d_val_.exp = new absyn::SeqExp(scanner_.GetTokPos(), vs_(0).explist);}
        break;

        case 20:
#line 90 "tiger.y"
        {d_val_.exp = new absyn::RecordExp(scanner_.GetTokPos(), vs_(-2).sym, new absyn::EFieldList());}
        break;

        case 21:
#line 91 "tiger.y"
        {d_val_.exp = new absyn::RecordExp(scanner_.GetTokPos(), vs_(-3).sym, vs_(-1).efieldlist);}
        break;

        case 22:
#line 94 "tiger.y"
        {d_val_.exp = new absyn::IfExp(scanner_.GetTokPos(), vs_(-2).exp, vs_(0).exp, nullptr);}
        break;

        case 23:
#line 95 "tiger.y"
        {d_val_.exp = new absyn::IfExp(scanner_.GetTokPos(), vs_(-4).exp, vs_(-2).exp, vs_(0).exp);}
        break;

        case 24:
#line 96 "tiger.y"
        {d_val_.exp = new absyn::IfExp(scanner_.GetTokPos(), vs_(-3).exp, vs_(0).exp, nullptr);}
        break;

        case 25:
#line 97 "tiger.y"
        {d_val_.exp = new absyn::IfExp(scanner_.GetTokPos(), vs_(-5).exp, vs_(-2).exp, vs_(0).exp);}
        break;

        case 26:
#line 100 "tiger.y"
        {d_val_.exp = new absyn::ForExp(scanner_.GetTokPos(), vs_(-6).sym, vs_(-4).exp, vs_(-2).exp, vs_(0).exp);}
        break;

        case 27:
#line 103 "tiger.y"
        {d_val_.exp = new absyn::WhileExp(scanner_.GetTokPos(), vs_(-2).exp, vs_(0).exp);}
        break;

        case 28:
#line 104 "tiger.y"
        {d_val_.exp = new absyn::WhileExp(scanner_.GetTokPos(), vs_(-3).exp, vs_(0).exp);}
        break;

        case 29:
#line 107 "tiger.y"
        {d_val_.exp = new absyn::CallExp(scanner_.GetTokPos(), vs_(-3).sym, vs_(-1).explist);}
        break;

        case 30:
#line 108 "tiger.y"
        {d_val_.exp = new absyn::CallExp(scanner_.GetTokPos(), vs_(-2).sym, new absyn::ExpList());}
        break;

        case 31:
#line 111 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::EQ_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 32:
#line 112 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::NEQ_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 33:
#line 113 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::LT_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 34:
#line 114 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::LE_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 35:
#line 115 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::GT_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 36:
#line 116 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::GE_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 37:
#line 117 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::PLUS_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 38:
#line 118 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::MINUS_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 39:
#line 119 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::TIMES_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 40:
#line 120 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::DIVIDE_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 41:
#line 121 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::AND_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 42:
#line 122 "tiger.y"
        {d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::OR_OP, vs_(-2).exp, vs_(0).exp);}
        break;

        case 43:
#line 123 "tiger.y"
        {
         d_val_.exp = new absyn::OpExp(scanner_.GetTokPos(), absyn::MINUS_OP, new absyn::IntExp(scanner_.GetTokPos(), 0), vs_(0).exp);
         }
        break;

        case 44:
#line 130 "tiger.y"
        { d_val_.explist = nullptr; }
        break;

        case 45:
#line 131 "tiger.y"
        { d_val_.explist = vs_(0).explist; }
        break;

        case 46:
#line 134 "tiger.y"
        { d_val_.explist = new absyn::ExpList(vs_(0).exp); }
        break;

        case 47:
#line 135 "tiger.y"
        { d_val_.explist = vs_(0).explist; d_val_.explist->Prepend(vs_(-2).exp); }
        break;

        case 48:
#line 138 "tiger.y"
        { d_val_.explist = new absyn::ExpList(vs_(0).exp); }
        break;

        case 49:
#line 139 "tiger.y"
        { d_val_.explist = vs_(0).explist; d_val_.explist->Prepend(vs_(-2).exp); }
        break;

        case 50:
#line 140 "tiger.y"
        { d_val_.explist = vs_(0).explist; d_val_.explist->Prepend(vs_(-2).exp); }
        break;

        case 51:
#line 141 "tiger.y"
        { d_val_.explist = vs_(0).explist; }
        break;

        case 52:
#line 145 "tiger.y"
        {d_val_.var = new absyn::SimpleVar(scanner_.GetTokPos(), vs_(0).sym);}
        break;

        case 53:
#line 146 "tiger.y"
        {d_val_.var = new absyn::FieldVar(scanner_.GetTokPos(),vs_(-2).var,vs_(0).sym);}
        break;

        case 54:
#line 147 "tiger.y"
        {d_val_.var = new absyn::SubscriptVar(scanner_.GetTokPos(), vs_(-3).var, vs_(-1).exp);}
        break;

        case 55:
#line 148 "tiger.y"
        {d_val_.var = new absyn::SubscriptVar(scanner_.GetTokPos(), new absyn::SimpleVar(scanner_.GetTokPos(), vs_(-3).sym), vs_(-1).exp);}
        break;

        case 56:
#line 152 "tiger.y"
        { d_val_.declist = vs_(0).declist; }
        break;

        case 57:
#line 153 "tiger.y"
        {d_val_.declist = new absyn::DecList(vs_(0).dec);}
        break;

        case 58:
#line 154 "tiger.y"
        {d_val_.declist = vs_(0).declist; d_val_.declist->Prepend(vs_(-1).dec);}
        break;

        case 59:
#line 157 "tiger.y"
        {d_val_.declist = new absyn::DecList(vs_(0).dec);}
        break;

        case 60:
#line 158 "tiger.y"
        {d_val_.declist = vs_(0).declist; d_val_.declist->Prepend(vs_(-1).dec);}
        break;

        case 61:
#line 162 "tiger.y"
        {d_val_.dec = new absyn::TypeDec(scanner_.GetTokPos(), vs_(0).tydeclist);}
        break;

        case 62:
#line 163 "tiger.y"
        {d_val_.dec = new absyn::FunctionDec(scanner_.GetTokPos(), vs_(0).fundeclist);}
        break;

        case 63:
#line 166 "tiger.y"
        {d_val_.dec = new absyn::VarDec(scanner_.GetTokPos(), vs_(-2).sym, nullptr, vs_(0).exp);}
        break;

        case 64:
#line 167 "tiger.y"
        {d_val_.dec = new absyn::VarDec(scanner_.GetTokPos(), vs_(-4).sym, vs_(-2).sym, vs_(0).exp);}
        break;

        case 65:
#line 171 "tiger.y"
        { d_val_.efieldlist = vs_(0).efieldlist; }
        break;

        case 66:
#line 172 "tiger.y"
        { d_val_.efieldlist = nullptr; }
        break;

        case 67:
#line 175 "tiger.y"
        {d_val_.efieldlist = new absyn::EFieldList(vs_(0).efield);}
        break;

        case 68:
#line 176 "tiger.y"
        {d_val_.efieldlist = vs_(0).efieldlist; d_val_.efieldlist->Prepend(vs_(-2).efield);}
        break;

        case 69:
#line 180 "tiger.y"
        {d_val_.efield = new absyn::EField(vs_(-2).sym, vs_(0).exp);}
        break;

        case 70:
#line 184 "tiger.y"
        {d_val_.tydeclist = new absyn::NameAndTyList(vs_(0).tydec);}
        break;

        case 71:
#line 185 "tiger.y"
        {d_val_.tydeclist = vs_(0).tydeclist; d_val_.tydeclist->Prepend(vs_(-1).tydec);}
        break;

        case 72:
#line 189 "tiger.y"
        {d_val_.tydec = new absyn::NameAndTy(vs_(-2).sym, vs_(0).ty);}
        break;

        case 73:
#line 193 "tiger.y"
        { d_val_.fieldlist = nullptr; }
        break;

        case 74:
#line 194 "tiger.y"
        { d_val_.fieldlist = vs_(0).fieldlist; }
        break;

        case 75:
#line 197 "tiger.y"
        { d_val_.fieldlist = new absyn::FieldList(vs_(0).field); }
        break;

        case 76:
#line 198 "tiger.y"
        { d_val_.fieldlist = vs_(0).fieldlist; d_val_.fieldlist->Prepend(vs_(-2).field); }
        break;

        case 77:
#line 202 "tiger.y"
        { d_val_.field = new absyn::Field(scanner_.GetTokPos(), vs_(-2).sym, vs_(0).sym); }
        break;

        case 78:
#line 207 "tiger.y"
        {d_val_.ty = new absyn::ArrayTy(scanner_.GetTokPos(), vs_(0).sym);}
        break;

        case 79:
#line 208 "tiger.y"
        {d_val_.ty = new absyn::NameTy(scanner_.GetTokPos(), vs_(0).sym);}
        break;

        case 80:
#line 209 "tiger.y"
        {d_val_.ty = new absyn::RecordTy(scanner_.GetTokPos(), vs_(-1).fieldlist);}
        break;

        case 81:
#line 213 "tiger.y"
        {d_val_.fundeclist = new absyn::FunDecList(vs_(0).fundec);}
        break;

        case 82:
#line 214 "tiger.y"
        {d_val_.fundeclist = vs_(0).fundeclist; d_val_.fundeclist->Prepend(vs_(-1).fundec);}
        break;

        case 83:
#line 218 "tiger.y"
        {d_val_.fundec = new absyn::FunDec(scanner_.GetTokPos(), vs_(-7).sym, vs_(-5).fieldlist, vs_(-2).sym, vs_(0).exp);}
        break;

        case 84:
#line 219 "tiger.y"
        {d_val_.fundec = new absyn::FunDec(scanner_.GetTokPos(), vs_(-6).sym, new absyn::FieldList(), vs_(-2).sym, vs_(0).exp);}
        break;

        case 85:
#line 220 "tiger.y"
        {d_val_.fundec = new absyn::FunDec(scanner_.GetTokPos(), vs_(-5).sym, vs_(-3).fieldlist, nullptr, vs_(0).exp);}
        break;

        case 86:
#line 221 "tiger.y"
        {d_val_.fundec = new absyn::FunDec(scanner_.GetTokPos(), vs_(-4).sym, new absyn::FieldList(), nullptr, vs_(0).exp);}
        break;

        case 87:
#line 222 "tiger.y"
        {d_val_.fundec = new absyn::FunDec(scanner_.GetTokPos(), vs_(-9).sym, vs_(-7).fieldlist, vs_(-4).sym, vs_(-1).exp);}
        break;

        case 88:
#line 223 "tiger.y"
        {d_val_.fundec = new absyn::FunDec(scanner_.GetTokPos(), vs_(-8).sym, new absyn::FieldList(), vs_(-4).sym, vs_(-1).exp);}
        break;

        case 89:
#line 224 "tiger.y"
        {d_val_.fundec = new absyn::FunDec(scanner_.GetTokPos(), vs_(-7).sym, vs_(-5).fieldlist, nullptr, vs_(-1).exp);}
        break;

        case 90:
#line 225 "tiger.y"
        {d_val_.fundec = new absyn::FunDec(scanner_.GetTokPos(), vs_(-6).sym, new absyn::FieldList(), nullptr, vs_(-1).exp);}
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle_()
try
{
    if (s_state[state_()]->d_type & REQ_TOKEN)
        nextToken_();              // obtain next token


    int action = lookup_();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift_(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery_())
            redoToken_();
        else
            executeAction_(-action);
                                            // next token is the rule's LHS
        reduce_(-action); 
        return;
    }

    if (recovery_())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery_)
{
    if (not recovery_())
        errorRecovery_();
    else
    {
        if (token_() == Reserved_::EOF_)
            ABORT();
        popToken_();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken_()
{ 
    // If d_token is Reserved_::UNDETERMINED_ then if savedToken_() is
    // Reserved_::UNDETERMINED_ another token is obtained from lex(). Then
    // savedToken_() is assigned to d_token.

                                    // no need for a token: got one already
    if (token_() != Reserved_::UNDETERMINED_) 
    {
        return;                             
    }

    if (savedToken_() != Reserved_::UNDETERMINED_)
    {
        popToken_();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens_;       // accept another token (see
                                    // errorRecover())
        lex_(lex());
        print_();
    }
    print();
}

// derived/print
void Parser::print_()
{
// $insert print
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin_.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin_();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle_();
    }
}
catch (Return_ retValue)
{
    return retValue or d_nErrors_;
}


// derived/tail


